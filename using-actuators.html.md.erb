---
title: Using Spring Boot Actuators with Apps Manager
owner: Apps Manager
---

This document describes how to view and manage app information from Spring Boot Actuator in Apps Manager. 

## <a id="prereq"></a>Prerequisites

The Apps Manager integration with Spring Boot Actuator requires the following:

* A PCF user with the `SpaceDeveloper` role. See [App Space Roles](../adminguide/cli-user-management.html#space-roles).
* Spring Boot v1.5 or later.
* Completing the procedures in [Configure Spring Boot Actuator Endpoints for Apps Manager](./spring-boot-actuators.html). 
	<br>
	After your configure your app, Apps Manager displays the Spring Boot logo next to its name on the app page:

	![Icon](actuator-icon.png)

## <a id="view-build"></a>View Build and Git Information for Your App

To view the data that your app sends to its `/info` Actuator endpoint, select the **Settings** tab:

![Info](info.png)
	
In the upper right of the app page, Apps Manager also displays the SHA of your app code repository from the latest build:
	
![Git sha](git-sha.png)

## <a id="view-app-health"></a>View App Health 

To view the health-check data that your app sends to its `/health` Actuator endpoints, see the **Instances** section:

![Info](hc.png)

## <a id="manage-log-levels"></a> Manage Log Levels in Apps Manager

Spring Boot apps include _loggers_ for many provided and user components of the app. You can set the log level for each logger in Apps Manager. 

To view the **Configure Logging Levels** screen, select the **Logs** tab and click the **Configure Logging Levels** button. 

![Configure Logging Levels](config-log-levels.png)

Apps Manager displays the default log level for each logger in gray. 

![Defaults](default-levels.png)

You can modify the log level for any logger by clicking the desired level in the logger row as in the image below. Whenever you set a log level, the following happens:

* The log level becomes blue to indicate that it is user-configured.
* Each child namespace of the logger inherits the log level.
	<p class="note"><strong>Note</strong>: You can manually set any of the child loggers to override this inheritance.</p>

![Set Log level](set-levels.png)

All of the loggers with user-configured logging levels float to the top of the list.

![Float to top](float-levels.png)

You can reset log levels by clicking the white dot displayed on the current log level.

![Reset Logs](reset-logs.png)

You can also filter what loggers you see using the **Filter Loggers** textbox.

![Filter Loggers](filter-loggers.png)

## <a id="troubleshoot"></a> Troubleshoot /cloudfoundryapplication Failed Request

### Symptom

You see the following failed request message in your app logs:

<pre class="terminal">
Could not find resource for relative : /cloudfoundryapplication of full path: http://example.com/cloudfoundryapplication
</pre>

### Explanation

Apps Manager uses the `/cloudfoundryapplication` endpoint as the root for Spring Boot Actuator integrations. It calls this endpoint for an app when you view the app in the Apps Manager UI, regardless of whether you have [configured Spring Boot Actuator endpoints for Apps Manager](./spring-boot-actuators.html).

### Solution

If you are not using the Spring Boot Actuator integrations for Apps Manager, you can ignore this failed request message. 